{"remainingRequest":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/paper/edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/paper/edit.vue","mtime":1609922416764},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCgppbXBvcnQgeyBtYXBHZXR0ZXJzLCBtYXBTdGF0ZSwgbWFwQWN0aW9ucyB9IGZyb20gJ3Z1ZXgnCmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJ0AvY29tcG9uZW50cy9QYWdpbmF0aW9uJwppbXBvcnQgUXVlc3Rpb25TaG93IGZyb20gJy4uL3F1ZXN0aW9uL2NvbXBvbmVudHMvU2hvdycKaW1wb3J0IGV4YW1QYXBlckFwaSBmcm9tICdAL2FwaS9leGFtUGFwZXInCmltcG9ydCBxdWVzdGlvbkFwaSBmcm9tICdAL2FwaS9xdWVzdGlvbicKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7IFBhZ2luYXRpb24sIFF1ZXN0aW9uU2hvdyB9LAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgZm9ybTogewogICAgICAgIGlkOiBudWxsLAogICAgICAgIGxldmVsOiBudWxsLAogICAgICAgIHN1YmplY3RJZDogbnVsbCwKICAgICAgICBwYXBlclR5cGU6IDEsCiAgICAgICAgbGltaXREYXRlVGltZTogW10sCiAgICAgICAgbmFtZTogJycsCiAgICAgICAgc3VnZ2VzdFRpbWU6IG51bGwsCiAgICAgICAgdGl0bGVJdGVtczogW10KICAgICAgfSwKICAgICAgc3ViamVjdEZpbHRlcjogbnVsbCwKICAgICAgZm9ybUxvYWRpbmc6IGZhbHNlLAogICAgICBydWxlczogewogICAgICAgIGxldmVsOiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36YCJ5oup5bm057qnJywgdHJpZ2dlcjogJ2NoYW5nZScgfQogICAgICAgIF0sCiAgICAgICAgc3ViamVjdElkOiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36YCJ5oup5a2m56eRJywgdHJpZ2dlcjogJ2NoYW5nZScgfQogICAgICAgIF0sCiAgICAgICAgcGFwZXJUeXBlOiBbCiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn6K+36YCJ5oup6K+V5Y2357G75Z6LJywgdHJpZ2dlcjogJ2NoYW5nZScgfQogICAgICAgIF0sCiAgICAgICAgbmFtZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+ivt+i+k+WFpeivleWNt+WQjeensCcsIHRyaWdnZXI6ICdibHVyJyB9CiAgICAgICAgXSwKICAgICAgICBzdWdnZXN0VGltZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+ivt+i+k+WFpeW7uuiuruaXtumVvycsIHRyaWdnZXI6ICdibHVyJyB9CiAgICAgICAgXQogICAgICB9LAogICAgICBxdWVzdGlvblBhZ2U6IHsKICAgICAgICBtdWx0aXBsZVNlbGVjdGlvbjogW10sCiAgICAgICAgc2hvd0RpYWxvZzogZmFsc2UsCiAgICAgICAgcXVlcnlQYXJhbTogewogICAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgICBxdWVzdGlvblR5cGU6IG51bGwsCiAgICAgICAgICBzdWJqZWN0SWQ6IDEsCiAgICAgICAgICBwYWdlSW5kZXg6IDEsCiAgICAgICAgICBwYWdlU2l6ZTogNQogICAgICAgIH0sCiAgICAgICAgbGlzdExvYWRpbmc6IHRydWUsCiAgICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgICB0b3RhbDogMAogICAgICB9LAogICAgICBjdXJyZW50VGl0bGVJdGVtOiBudWxsCiAgICB9CiAgfSwKICBjcmVhdGVkICgpIHsKICAgIGxldCBpZCA9IHRoaXMuJHJvdXRlLnF1ZXJ5LmlkCiAgICBsZXQgX3RoaXMgPSB0aGlzCiAgICB0aGlzLmluaXRTdWJqZWN0KGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc3ViamVjdEZpbHRlciA9IF90aGlzLnN1YmplY3RzCiAgICB9KQogICAgaWYgKGlkICYmIHBhcnNlSW50KGlkKSAhPT0gMCkgewogICAgICBfdGhpcy5mb3JtTG9hZGluZyA9IHRydWUKICAgICAgZXhhbVBhcGVyQXBpLnNlbGVjdChpZCkudGhlbihyZSA9PiB7CiAgICAgICAgX3RoaXMuZm9ybSA9IHJlLnJlc3BvbnNlCiAgICAgICAgX3RoaXMuZm9ybUxvYWRpbmcgPSBmYWxzZQogICAgICB9KQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgc3VibWl0Rm9ybSAoKSB7CiAgICAgIGxldCBfdGhpcyA9IHRoaXMKICAgICAgdGhpcy4kcmVmcy5mb3JtLnZhbGlkYXRlKCh2YWxpZCkgPT4gewogICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgdGhpcy5mb3JtTG9hZGluZyA9IHRydWUKICAgICAgICAgIGV4YW1QYXBlckFwaS5lZGl0KHRoaXMuZm9ybSkudGhlbihyZSA9PiB7CiAgICAgICAgICAgIGlmIChyZS5jb2RlID09PSAxKSB7CiAgICAgICAgICAgICAgX3RoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZS5tZXNzYWdlKQogICAgICAgICAgICAgIF90aGlzLmRlbEN1cnJlbnRWaWV3KF90aGlzKS50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgIF90aGlzLiRyb3V0ZXIucHVzaCgnL2V4YW0vcGFwZXIvbGlzdCcpCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdGhpcy4kbWVzc2FnZS5lcnJvcihyZS5tZXNzYWdlKQogICAgICAgICAgICAgIHRoaXMuZm9ybUxvYWRpbmcgPSBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChlID0+IHsKICAgICAgICAgICAgdGhpcy5mb3JtTG9hZGluZyA9IGZhbHNlCiAgICAgICAgICB9KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICB9CiAgICAgIH0pCiAgICB9LAogICAgYWRkVGl0bGUgKCkgewogICAgICB0aGlzLmZvcm0udGl0bGVJdGVtcy5wdXNoKHsKICAgICAgICBuYW1lOiAnJywKICAgICAgICBxdWVzdGlvbkl0ZW1zOiBbXQogICAgICB9KQogICAgfSwKICAgIGFkZFF1ZXN0aW9uICh0aXRsZUl0ZW0pIHsKICAgICAgdGhpcy5jdXJyZW50VGl0bGVJdGVtID0gdGl0bGVJdGVtCiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLnNob3dEaWFsb2cgPSB0cnVlCiAgICAgIHRoaXMuc2VhcmNoKCkKICAgIH0sCiAgICByZW1vdmVUaXRsZUl0ZW0gKHRpdGxlSXRlbSkgewogICAgICB0aGlzLmZvcm0udGl0bGVJdGVtcy5yZW1vdmUodGl0bGVJdGVtKQogICAgfSwKICAgIHJlbW92ZVF1ZXN0aW9uICh0aXRsZUl0ZW0sIHF1ZXN0aW9uSXRlbSkgewogICAgICB0aXRsZUl0ZW0ucXVlc3Rpb25JdGVtcy5yZW1vdmUocXVlc3Rpb25JdGVtKQogICAgfSwKICAgIHF1ZXJ5Rm9ybSAoKSB7CiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLnF1ZXJ5UGFyYW0ucGFnZUluZGV4ID0gMQogICAgICB0aGlzLnNlYXJjaCgpCiAgICB9LAogICAgY29uZmlybVF1ZXN0aW9uU2VsZWN0ICgpIHsKICAgICAgbGV0IF90aGlzID0gdGhpcwogICAgICB0aGlzLnF1ZXN0aW9uUGFnZS5tdWx0aXBsZVNlbGVjdGlvbi5mb3JFYWNoKHEgPT4gewogICAgICAgIHF1ZXN0aW9uQXBpLnNlbGVjdChxLmlkKS50aGVuKHJlID0+IHsKICAgICAgICAgIF90aGlzLmN1cnJlbnRUaXRsZUl0ZW0ucXVlc3Rpb25JdGVtcy5wdXNoKHJlLnJlc3BvbnNlKQogICAgICAgIH0pCiAgICAgIH0pCiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLnNob3dEaWFsb2cgPSBmYWxzZQogICAgfSwKICAgIGxldmVsQ2hhbmdlICgpIHsKICAgICAgdGhpcy5mb3JtLnN1YmplY3RJZCA9IG51bGwKICAgICAgdGhpcy5zdWJqZWN0RmlsdGVyID0gdGhpcy5zdWJqZWN0cy5maWx0ZXIoZGF0YSA9PiBkYXRhLmxldmVsID09PSB0aGlzLmZvcm0ubGV2ZWwpCiAgICB9LAogICAgc2VhcmNoICgpIHsKICAgICAgdGhpcy5xdWVzdGlvblBhZ2UucXVlcnlQYXJhbS5zdWJqZWN0SWQgPSB0aGlzLmZvcm0uc3ViamVjdElkCiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLmxpc3RMb2FkaW5nID0gdHJ1ZQogICAgICBxdWVzdGlvbkFwaS5wYWdlTGlzdCh0aGlzLnF1ZXN0aW9uUGFnZS5xdWVyeVBhcmFtKS50aGVuKGRhdGEgPT4gewogICAgICAgIGNvbnN0IHJlID0gZGF0YS5yZXNwb25zZQogICAgICAgIHRoaXMucXVlc3Rpb25QYWdlLnRhYmxlRGF0YSA9IHJlLmxpc3QKICAgICAgICB0aGlzLnF1ZXN0aW9uUGFnZS50b3RhbCA9IHJlLnRvdGFsCiAgICAgICAgdGhpcy5xdWVzdGlvblBhZ2UucXVlcnlQYXJhbS5wYWdlSW5kZXggPSByZS5wYWdlTnVtCiAgICAgICAgdGhpcy5xdWVzdGlvblBhZ2UubGlzdExvYWRpbmcgPSBmYWxzZQogICAgICB9KQogICAgfSwKICAgIGhhbmRsZVNlbGVjdGlvbkNoYW5nZSAodmFsKSB7CiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLm11bHRpcGxlU2VsZWN0aW9uID0gdmFsCiAgICB9LAogICAgcXVlc3Rpb25UeXBlRm9ybWF0dGVyIChyb3csIGNvbHVtbiwgY2VsbFZhbHVlLCBpbmRleCkgewogICAgICByZXR1cm4gdGhpcy5lbnVtRm9ybWF0KHRoaXMucXVlc3Rpb25UeXBlRW51bSwgY2VsbFZhbHVlKQogICAgfSwKICAgIHN1YmplY3RGb3JtYXR0ZXIgKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSB7CiAgICAgIHJldHVybiB0aGlzLnN1YmplY3RFbnVtRm9ybWF0KGNlbGxWYWx1ZSkKICAgIH0sCiAgICByZXNldEZvcm0gKCkgewogICAgICB0aGlzLiRyZWZzWydmb3JtJ10ucmVzZXRGaWVsZHMoKQogICAgICB0aGlzLmZvcm0gPSB7CiAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgbGV2ZWw6IG51bGwsCiAgICAgICAgc3ViamVjdElkOiBudWxsLAogICAgICAgIHBhcGVyVHlwZTogMSwKICAgICAgICBsaW1pdERhdGVUaW1lOiBbXSwKICAgICAgICBuYW1lOiAnJywKICAgICAgICBzdWdnZXN0VGltZTogbnVsbCwKICAgICAgICB0aXRsZUl0ZW1zOiBbXQogICAgICB9CiAgICB9LAogICAgLi4ubWFwQWN0aW9ucygnZXhhbScsIHsgaW5pdFN1YmplY3Q6ICdpbml0U3ViamVjdCcgfSksCiAgICAuLi5tYXBBY3Rpb25zKCd0YWdzVmlldycsIHsgZGVsQ3VycmVudFZpZXc6ICdkZWxDdXJyZW50VmlldycgfSkKICB9LAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBHZXR0ZXJzKCdlbnVtSXRlbScsIFsnZW51bUZvcm1hdCddKSwKICAgIC4uLm1hcFN0YXRlKCdlbnVtSXRlbScsIHsKICAgICAgcXVlc3Rpb25UeXBlRW51bTogc3RhdGUgPT4gc3RhdGUuZXhhbS5xdWVzdGlvbi50eXBlRW51bSwKICAgICAgcGFwZXJUeXBlRW51bTogc3RhdGUgPT4gc3RhdGUuZXhhbS5leGFtUGFwZXIucGFwZXJUeXBlRW51bSwKICAgICAgbGV2ZWxFbnVtOiBzdGF0ZSA9PiBzdGF0ZS51c2VyLmxldmVsRW51bQogICAgfSksCiAgICAuLi5tYXBTdGF0ZSgnZXhhbScsIHsgc3ViamVjdHM6IHN0YXRlID0+IHN0YXRlLnN1YmplY3RzIH0pCiAgfQp9Cg=="},null]}