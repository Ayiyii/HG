{"remainingRequest":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/question/edit/multiple-choice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/question/edit/multiple-choice.vue","mtime":1622641709283},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}