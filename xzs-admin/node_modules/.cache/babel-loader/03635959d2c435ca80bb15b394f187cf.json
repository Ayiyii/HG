{"remainingRequest":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/thread-loader/dist/cjs.js!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/babel-loader/lib/index.js!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/paper/edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/paper/edit.vue","mtime":1622549311194},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9jeW50aGlhY2hlbi9wcm9qZWN0L2dyYWR1YXRpb25fZGVzaWduL3h6cy94enMtbXlzcWwvc291cmNlL3Z1ZS94enMtYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBtYXBHZXR0ZXJzLCBtYXBTdGF0ZSwgbWFwQWN0aW9ucyB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgUGFnaW5hdGlvbiBmcm9tICdAL2NvbXBvbmVudHMvUGFnaW5hdGlvbic7CmltcG9ydCBRdWVzdGlvblNob3cgZnJvbSAnLi4vcXVlc3Rpb24vY29tcG9uZW50cy9TaG93JzsKaW1wb3J0IGV4YW1QYXBlckFwaSBmcm9tICdAL2FwaS9leGFtUGFwZXInOwppbXBvcnQgcXVlc3Rpb25BcGkgZnJvbSAnQC9hcGkvcXVlc3Rpb24nOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgUGFnaW5hdGlvbjogUGFnaW5hdGlvbiwKICAgIFF1ZXN0aW9uU2hvdzogUXVlc3Rpb25TaG93CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZm9ybTogewogICAgICAgIGlkOiBudWxsLAogICAgICAgIGxldmVsOiBudWxsLAogICAgICAgIHN1YmplY3RJZDogbnVsbCwKICAgICAgICBwYXBlclR5cGU6IDEsCiAgICAgICAgbGltaXREYXRlVGltZTogW10sCiAgICAgICAgbmFtZTogJycsCiAgICAgICAgc2NvcmU6IDAsCiAgICAgICAgc2NvcmVzOiAwLAogICAgICAgIHN1Z2dlc3RUaW1lOiBudWxsLAogICAgICAgIHRpdGxlSXRlbXM6IFtdCiAgICAgIH0sCiAgICAgIHN1YmplY3RGaWx0ZXI6IG51bGwsCiAgICAgIGZvcm1Mb2FkaW5nOiBmYWxzZSwKICAgICAgcnVsZXM6IHsKICAgICAgICBsZXZlbDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeW5tOe6pycsCiAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICAgIH1dLAogICAgICAgIHN1YmplY3RJZDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeWtpuenkScsCiAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICAgIH1dLAogICAgICAgIHBhcGVyVHlwZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeivleWNt+exu+WeiycsCiAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICAgIH1dLAogICAgICAgIG5hbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXor5XljbflkI3np7AnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgc3VnZ2VzdFRpbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXlu7rorq7ml7bplb8nLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0KICAgICAgfSwKICAgICAgcXVlc3Rpb25QYWdlOiB7CiAgICAgICAgbXVsdGlwbGVTZWxlY3Rpb246IFtdLAogICAgICAgIHNob3dEaWFsb2c6IGZhbHNlLAogICAgICAgIHF1ZXJ5UGFyYW06IHsKICAgICAgICAgIGlkOiBudWxsLAogICAgICAgICAgcXVlc3Rpb25UeXBlOiBudWxsLAogICAgICAgICAgc3ViamVjdElkOiAnJywKICAgICAgICAgIGNoYXB0ZXJJZDogJycsCiAgICAgICAgICBwYWdlSW5kZXg6IDEsCiAgICAgICAgICBwYWdlU2l6ZTogNQogICAgICAgIH0sCiAgICAgICAgbGlzdExvYWRpbmc6IHRydWUsCiAgICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgICB0b3RhbDogMAogICAgICB9LAogICAgICBhdXRvUGFnZTogewogICAgICAgIHNob3dEaWFsb2c6IGZhbHNlLAogICAgICAgIHR5cGVQYWdlOiB7CiAgICAgICAgICB0eXBlSXRlbXM6IFt7CiAgICAgICAgICAgIG51bTogbnVsbCwKICAgICAgICAgICAgbGV2ZWw6IG51bGwsCiAgICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAgICBjaGFwdGVySWQ6ICcnLAogICAgICAgICAgICB0eXBlSXRlbXM6IFtdCiAgICAgICAgICB9XSwKICAgICAgICAgIHN1YmplY3RJZDogbnVsbCwKICAgICAgICAgIHBhcGVyVHlwZTogMSwKICAgICAgICAgIGxpbWl0RGF0ZVRpbWU6IG51bGwsCiAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgIHN1Z2dlc3RUaW1lOiBudWxsLAogICAgICAgICAgcXVlc3Rpb25TZWxlY3RJdGVtczogW3sKICAgICAgICAgICAgbnVtOiBudWxsLAogICAgICAgICAgICBsZXZlbDogbnVsbCwKICAgICAgICAgICAgc3ViamVjdElkOiBudWxsLAogICAgICAgICAgICBxdWVzdGlvblR5cGU6IG51bGwsCiAgICAgICAgICAgIGNoYXB0ZXJJZDogbnVsbAogICAgICAgICAgfV0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHRlbXBsYXRlMTogewogICAgICAgIHNob3dEaWFsb2c6IGZhbHNlLAogICAgICAgIHR5cGVQYWdlOiB7CiAgICAgICAgICB0eXBlSXRlbXM6IFt7CiAgICAgICAgICAgIG51bTogNSwKICAgICAgICAgICAgbGV2ZWw6IG51bGwsCiAgICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAgICBjaGFwdGVySWQ6ICcnLAogICAgICAgICAgICB0eXBlSXRlbXM6IFtdCiAgICAgICAgICB9XSwKICAgICAgICAgIHN1YmplY3RJZDogbnVsbCwKICAgICAgICAgIHBhcGVyVHlwZTogMSwKICAgICAgICAgIGxpbWl0RGF0ZVRpbWU6IG51bGwsCiAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgIHN1Z2dlc3RUaW1lOiBudWxsLAogICAgICAgICAgcXVlc3Rpb25TZWxlY3RJdGVtczogW3sKICAgICAgICAgICAgbnVtOiA1LAogICAgICAgICAgICBsZXZlbDogMSwKICAgICAgICAgICAgc3ViamVjdElkOiBudWxsLAogICAgICAgICAgICBxdWVzdGlvblR5cGU6IDEsCiAgICAgICAgICAgIHNjb3JlOiAxMAogICAgICAgICAgfSwgewogICAgICAgICAgICBudW06IDUsCiAgICAgICAgICAgIGxldmVsOiAxLAogICAgICAgICAgICBzdWJqZWN0SWQ6IDEsCiAgICAgICAgICAgIHF1ZXN0aW9uVHlwZTogMiwKICAgICAgICAgICAgc2NvcmU6IDEwCiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfSwKICAgICAgdGVtcGxhdGUyOiB7CiAgICAgICAgc2hvd0RpYWxvZzogZmFsc2UsCiAgICAgICAgdHlwZVBhZ2U6IHsKICAgICAgICAgIHR5cGVJdGVtczogW3sKICAgICAgICAgICAgbnVtOiA1LAogICAgICAgICAgICBsZXZlbDogbnVsbCwKICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgIGNoYXB0ZXJJZDogJycsCiAgICAgICAgICAgIHR5cGVJdGVtczogW10KICAgICAgICAgIH1dLAogICAgICAgICAgc3ViamVjdElkOiBudWxsLAogICAgICAgICAgcGFwZXJUeXBlOiAxLAogICAgICAgICAgbGltaXREYXRlVGltZTogbnVsbCwKICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAgc3VnZ2VzdFRpbWU6IG51bGwsCiAgICAgICAgICBxdWVzdGlvblNlbGVjdEl0ZW1zOiBbewogICAgICAgICAgICBudW06IDEsCiAgICAgICAgICAgIGxldmVsOiAxLAogICAgICAgICAgICBzdWJqZWN0SWQ6IG51bGwsCiAgICAgICAgICAgIHF1ZXN0aW9uVHlwZTogMSwKICAgICAgICAgICAgc2NvcmU6IDUKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbnVtOiAxLAogICAgICAgICAgICBsZXZlbDogMSwKICAgICAgICAgICAgc3ViamVjdElkOiAxLAogICAgICAgICAgICBxdWVzdGlvblR5cGU6IDIsCiAgICAgICAgICAgIHNjb3JlOiA2CiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfSwKICAgICAgdGVtcGxhdGUzOiB7CiAgICAgICAgc2hvd0RpYWxvZzogZmFsc2UsCiAgICAgICAgdHlwZVBhZ2U6IHsKICAgICAgICAgIHR5cGVJdGVtczogW3sKICAgICAgICAgICAgbnVtOiA1LAogICAgICAgICAgICBsZXZlbDogbnVsbCwKICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgIGNoYXB0ZXJJZDogJycsCiAgICAgICAgICAgIHR5cGVJdGVtczogW10KICAgICAgICAgIH1dLAogICAgICAgICAgc3ViamVjdElkOiBudWxsLAogICAgICAgICAgcGFwZXJUeXBlOiAxLAogICAgICAgICAgbGltaXREYXRlVGltZTogbnVsbCwKICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAgc3VnZ2VzdFRpbWU6IG51bGwsCiAgICAgICAgICBxdWVzdGlvblNlbGVjdEl0ZW1zOiBbewogICAgICAgICAgICBudW06IDEsCiAgICAgICAgICAgIGxldmVsOiAxLAogICAgICAgICAgICBzdWJqZWN0SWQ6IG51bGwsCiAgICAgICAgICAgIHF1ZXN0aW9uVHlwZTogMSwKICAgICAgICAgICAgc2NvcmU6IDUKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbnVtOiAxLAogICAgICAgICAgICBsZXZlbDogMSwKICAgICAgICAgICAgc3ViamVjdElkOiAxLAogICAgICAgICAgICBxdWVzdGlvblR5cGU6IDIsCiAgICAgICAgICAgIHNjb3JlOiA2CiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfSwKICAgICAgcXVlcnlDaGE6IHsKICAgICAgICBwYWdlSW5kZXg6IDEsCiAgICAgICAgcGFnZVNpemU6IDEwMCwKICAgICAgICBzdWJqZWN0SWQ6ICcnLAogICAgICAgIGdyYWRlTGV2ZWw6ICcnCiAgICAgIH0sCiAgICAgIGNoYXB0ZXJzOiAnJywKICAgICAgY3VycmVudFRpdGxlSXRlbTogW10KICAgIH07CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIGlkID0gdGhpcy4kcm91dGUucXVlcnkuaWQ7CgogICAgdmFyIF90aGlzID0gdGhpczsgLy8gIHRoaXMuYXV0b1BhZ2UucXVlc3Rpb25TZWxlY3RJdGVtcy5xdWVzdGlvblR5cGU9dGhpcy5xdWVzdGlvblBhZ2UucXVlcnlQYXJhbS5xdWVzdGlvblR5cGUKCgogICAgdGhpcy5pbml0U3ViamVjdChmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnN1YmplY3RGaWx0ZXIgPSBfdGhpcy5zdWJqZWN0czsKICAgIH0pOwoKICAgIGlmIChpZCAmJiBwYXJzZUludChpZCkgIT09IDApIHsKICAgICAgX3RoaXMuZm9ybUxvYWRpbmcgPSB0cnVlOwogICAgICBleGFtUGFwZXJBcGkuc2VsZWN0KGlkKS50aGVuKGZ1bmN0aW9uIChyZSkgewogICAgICAgIF90aGlzLmZvcm0gPSByZS5yZXNwb25zZTsKICAgICAgICBfdGhpcy5mb3JtTG9hZGluZyA9IGZhbHNlOwogICAgICB9KTsKICAgIH0KCiAgICB0aGlzLmZvcm07CiAgfSwKICB3YXRjaDogewogICAgLy/lr7nosaHlj4zlkJHmlbDmja7nu5HlrpoKICAgICdmb3JtLnN1YmplY3RJZCc6IGZ1bmN0aW9uIGZvcm1TdWJqZWN0SWQobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgLy8gY29uc29sZS5sb2coYG5ldzoke25ld1ZhbH0sIG9sZDoke29sZFZhbH1gKTsKICAgICAgaWYgKG5ld1ZhbCkgewogICAgICAgIHRoaXMucXVlcnlDaGEuc3ViamVjdElkID0gbmV3VmFsOwogICAgICAgIHRoaXMuZ2V0Q2hhcHRlcigpOwogICAgICB9CiAgICB9LAoKICAgIC8qICAnZm9ybS50aXRsZUl0ZW1zJyhuZXdWYWwsIG9sZFZhbCkgewogICAgICAgICBjb25zb2xlLmxvZyhuZXdWYWwpOwogICAgICAgICAgaWYobmV3VmFsKXsKICAgICAgICAgICAgLy/orqHnrpfmgLvliIYKICAgICAgICAgICAgbGV0IHNjb3Jlcz0wCiAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5mb3JtLnRpdGxlSXRlbXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgbGV0IHNjb3JlPSBOdW1iZXIodGhpcy5mb3JtLnRpdGxlSXRlbXNbaV0uc2NvcmUpOwogICAgICAgICAgICAgIGxldCBsZW49dGhpcy5mb3JtLnRpdGxlSXRlbXNbaV0ucXVlc3Rpb25JdGVtcy5sZW5ndGg7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coc2NvcmUqbGVuKTsKICAgICAgICAgICAgICAgbGV0IHN1bT1zY29yZSpsZW47CiAgICAgICAgICAgICAgc2NvcmVzPXNjb3JlK3N1bTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzY29yZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuZm9ybS5zY29yZXM9c2NvcmVzOwogICAgICAgICAgICAKICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICB9CiAgICAgICB9LCAqLwogICAgdGl0bGVJdGVtczogZnVuY3Rpb24gdGl0bGVJdGVtcyhuZXdWYWwsIG9sZFZhbHVlKSB7CiAgICAgIGNvbnNvbGUubG9nKG5ld1ZhbCk7CgogICAgICBpZiAobmV3VmFsKSB7CiAgICAgICAgLy/orqHnrpfmgLvliIYKICAgICAgICB2YXIgc2NvcmVzID0gMDsKCiAgICAgICAgaWYgKHRoaXMuZm9ybS50aXRsZUl0ZW1zLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGlmICh0aGlzLmZvcm0udGl0bGVJdGVtc1swXS5xdWVzdGlvbkl0ZW1zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZvcm0udGl0bGVJdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHZhciBzY29yZSA9IE51bWJlcih0aGlzLmZvcm0udGl0bGVJdGVtc1tpXS5zY29yZSk7CiAgICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMuZm9ybS50aXRsZUl0ZW1zW2ldLnF1ZXN0aW9uSXRlbXMubGVuZ3RoOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxlbik7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coc2NvcmUpOwogICAgICAgICAgICAgIHZhciBzdW0gPSBzY29yZSAqIGxlbjsKICAgICAgICAgICAgICBzY29yZXMgPSBzY29yZXMgKyBzdW07CiAgICAgICAgICAgICAgY29uc29sZS5sb2coc2NvcmVzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5mb3JtLnNjb3JlcyA9IHNjb3JlczsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7CiAgICBnZXRDaGFwdGVyOiBmdW5jdGlvbiBnZXRDaGFwdGVyKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHF1ZXN0aW9uQXBpLmNoYXB0ZXJMaXN0KHRoaXMucXVlcnlDaGEpLnRoZW4oZnVuY3Rpb24gKHJlKSB7CiAgICAgICAgdmFyIGxpc3QgPSByZS5yZXNwb25zZS5saXN0OwogICAgICAgIHZhciBsaXN0MSA9IFtdOyAvL2xldCBjaGFJZD1bXTsKICAgICAgICAvL+WOu+mZpOepuumhuQoKICAgICAgICBfdGhpczIuY2hhSWQgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBfdGhpczIuY2hhSWQucHVzaChsaXN0W2ldLmlkKTsKCiAgICAgICAgICBpZiAobGlzdFtpXS5uYW1lKSB7CiAgICAgICAgICAgIGxpc3QxLnB1c2gobGlzdFtpXSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBfdGhpczIuY2hhcHRlcnMgPSBsaXN0MTsgLy8gdGhpcy5mb3JtLmNoYXB0ZXJJZD1TdHJpbmcodGhpcy5jaGFwdGVyU2hvdy5jaGFwdGVyc1swXS5pZCkKICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuY2hhcHRlcnMpCiAgICAgIH0pOwogICAgfSwKICAgIHN1Ym1pdEZvcm06IGZ1bmN0aW9uIHN1Ym1pdEZvcm0oKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHRoaXMuJHJlZnMuZm9ybS52YWxpZGF0ZShmdW5jdGlvbiAodmFsaWQpIHsKICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgIF90aGlzMy5mb3JtTG9hZGluZyA9IHRydWU7CiAgICAgICAgICBleGFtUGFwZXJBcGkuZWRpdChfdGhpczMuZm9ybSkudGhlbihmdW5jdGlvbiAocmUpIHsKICAgICAgICAgICAgaWYgKHJlLmNvZGUgPT09IDEpIHsKICAgICAgICAgICAgICBfdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlLm1lc3NhZ2UpOwoKICAgICAgICAgICAgICBfdGhpcy5kZWxDdXJyZW50VmlldyhfdGhpcykudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBfdGhpcy4kcm91dGVyLnB1c2goJy9leGFtL3BhcGVyL2xpc3QnKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdGhpcy4kbWVzc2FnZS5lcnJvcihyZS5tZXNzYWdlKTsKCiAgICAgICAgICAgICAgX3RoaXMzLmZvcm1Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIF90aGlzMy5mb3JtTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGFkZFRpdGxlOiBmdW5jdGlvbiBhZGRUaXRsZSgpIHsKICAgICAgdGhpcy5mb3JtLnRpdGxlSXRlbXMucHVzaCh7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgc2NvcmU6ICcnLAogICAgICAgIHF1ZXN0aW9uSXRlbXM6IFtdCiAgICAgIH0pOwogICAgfSwKICAgIC8v5re75Yqg6aKY5Z6LCiAgICBhZGRUeXBlOiBmdW5jdGlvbiBhZGRUeXBlKCkgewogICAgICB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXMucHVzaCh7CiAgICAgICAgbmFtZTogJycsCiAgICAgICAgdHlwZUl0ZW1zOiBbXSwKICAgICAgICBudW06IG51bGwsCiAgICAgICAgbGV2ZWw6IG51bGwsCiAgICAgICAgY2hhcHRlcklkOiBudWxsCiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyh0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXMpOwogICAgfSwKICAgIGFkZFF1ZXN0aW9uOiBmdW5jdGlvbiBhZGRRdWVzdGlvbih0aXRsZUl0ZW0pIHsKICAgICAgdGhpcy5jdXJyZW50VGl0bGVJdGVtID0gdGl0bGVJdGVtOwogICAgICB0aGlzLnF1ZXN0aW9uUGFnZS5zaG93RGlhbG9nID0gdHJ1ZTsKICAgICAgdGhpcy5zZWFyY2goKTsKICAgIH0sCiAgICBhZGRBdXRvOiBmdW5jdGlvbiBhZGRBdXRvKHRpdGxlSXRlbSkgewogICAgICB0aGlzLmN1cnJlbnRUaXRsZUl0ZW0gPSB0aXRsZUl0ZW07CiAgICAgIHRoaXMuYXV0b1BhZ2Uuc2hvd0RpYWxvZyA9IHRydWU7CiAgICAgIHRoaXMuc2VhcmNoKCk7CiAgICB9LAogICAgcmVtb3ZlVGl0bGVJdGVtOiBmdW5jdGlvbiByZW1vdmVUaXRsZUl0ZW0odGl0bGVJdGVtKSB7CiAgICAgIHRoaXMuZm9ybS50aXRsZUl0ZW1zLnJlbW92ZSh0aXRsZUl0ZW0pOwogICAgfSwKICAgIHJlbW92ZVF1ZXN0aW9uOiBmdW5jdGlvbiByZW1vdmVRdWVzdGlvbih0aXRsZUl0ZW0sIHF1ZXN0aW9uSXRlbSkgewogICAgICB0aXRsZUl0ZW0ucXVlc3Rpb25JdGVtcy5yZW1vdmUocXVlc3Rpb25JdGVtKTsKICAgIH0sCiAgICBxdWVyeUZvcm06IGZ1bmN0aW9uIHF1ZXJ5Rm9ybSgpIHsKICAgICAgdGhpcy5xdWVzdGlvblBhZ2UucXVlcnlQYXJhbS5wYWdlSW5kZXggPSAxOwogICAgICB0aGlzLnNlYXJjaCgpOwogICAgfSwKICAgIGNvbmZpcm1RdWVzdGlvblNlbGVjdDogZnVuY3Rpb24gY29uZmlybVF1ZXN0aW9uU2VsZWN0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5xdWVzdGlvblBhZ2UubXVsdGlwbGVTZWxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAocSkgewogICAgICAgIHF1ZXN0aW9uQXBpLnNlbGVjdChxLmlkKS50aGVuKGZ1bmN0aW9uIChyZSkgewogICAgICAgICAgX3RoaXMuY3VycmVudFRpdGxlSXRlbS5xdWVzdGlvbkl0ZW1zLnB1c2gocmUucmVzcG9uc2UpOyAvLyBjb25zb2xlLmxvZyhfdGhpcy5jdXJyZW50VGl0bGVJdGVtKQoKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLnNob3dEaWFsb2cgPSBmYWxzZTsKICAgIH0sCiAgICAvLyAg6Ieq5Yqo57uE5Y23CiAgICBjb25maXJtVHlwZTogZnVuY3Rpb24gY29uZmlybVR5cGUoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdGhpcy5hdXRvUGFnZS50eXBlUGFnZS5zdWJqZWN0SWQgPSB0aGlzLmZvcm0uc3ViamVjdElkOwogICAgICB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnN1Z2dlc3RUaW1lID0gdGhpcy5mb3JtLnN1Z2dlc3RUaW1lOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXNbaV0ubmFtZSA9ICcnOwogICAgICAgIHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UucXVlc3Rpb25TZWxlY3RJdGVtc1tpXS5zdWJqZWN0SWQgPSB0aGlzLmZvcm0uc3ViamVjdElkOyAvLyB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXNbaV0ucXVlc3Rpb25UeXBlPSB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXMucXVlc3Rpb25UeXBlOwogICAgICB9IC8vIGNvbnNvbGUubG9nKHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UpCgoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGV4YW1QYXBlckFwaS5hdXRvKHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB2YXIgcmUgPSBkYXRhLnJlc3BvbnNlOyAvLyB0aGlzLmF1dG9mb3JtLnRpdGxlSXRlbXMucXVlc3Rpb25JdGVtcz1bXQoKICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgcmUudGl0bGVJdGVtcy5sZW5ndGg7IF9pKyspIHsKICAgICAgICAgIHZhciB0bXAgPSByZS50aXRsZUl0ZW1zW19pXS5xdWVzdGlvbkl0ZW1zOwogICAgICAgICAgdmFyIF9zY29yZSA9IHJlLnRpdGxlSXRlbXNbX2ldLnNjb3JlOwoKICAgICAgICAgIF90aGlzNC5mb3JtLnRpdGxlSXRlbXMucHVzaCh7CiAgICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAgICBxdWVzdGlvbkl0ZW1zOiB0bXAsCiAgICAgICAgICAgIHNjb3JlOiBfc2NvcmUKICAgICAgICAgIH0pOyAvLyAgZm9yKGxldCBqPTA7ajxyZS50aXRsZUl0ZW1zW2ldLnF1ZXN0aW9uSXRlbXMubGVuZ3RoO2orKyl7CiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhyZS50aXRsZUl0ZW1zW2ldLnF1ZXN0aW9uSXRlbXNbal0pCiAgICAgICAgICAvLyB0aGlzLmN1cnJlbnRUaXRsZUl0ZW0ucXVlc3Rpb25JdGVtcy5wdXNoKHRtcCkKICAgICAgICAgIC8vICAgICAgIHRoaXMuZm9ybS50aXRsZUl0ZW1zW2ldLnF1ZXN0aW9uSXRlbXNbal0ucHVzaCh0bXApCgogICAgICAgICAgLyogICB0aGlzLiRzZXQodGhpcy5hdXRvZm9ybS50aXRsZUl0ZW1zLGosewogICAgICAgICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgICBxdWVzdGlvbkl0ZW1zOiB0bXAsCiAgICAgICAgICAgIH0pKi8KICAgICAgICAgIC8vIH0KCiAgICAgICAgfQoKICAgICAgICBjb25zb2xlLmxvZyhfdGhpczQuZm9ybS50aXRsZUl0ZW1zKTsKICAgICAgfSk7IC8vdGhpcy4kcmVmc1snYXV0b1BhZ2UnXS5yZXNldEZpZWxkcygpICAvLyDov5nph4zlj6/ku6XmjaLlgZrnp7vpmaTmoLflvI/nmoTmlrnms5VjbGVhclZhbGlkYXRlCiAgICAgIC8vIHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UgPSBjb3B5UHJvcHModGhpcy5hdXRvUGFnZS50eXBlUGFnZSkgIAoKICAgICAgdGhpcy5hdXRvUGFnZS5zaG93RGlhbG9nID0gZmFsc2U7CiAgICB9LAogICAgY2xvc2VEaWFsb2c6IGZ1bmN0aW9uIGNsb3NlRGlhbG9nKCkgewogICAgICB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlID0gewogICAgICAgIHR5cGVJdGVtczogW3sKICAgICAgICAgIG51bTogbnVsbCwKICAgICAgICAgIGxldmVsOiBudWxsLAogICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICB0eXBlSXRlbXM6IFtdCiAgICAgICAgfV0sCiAgICAgICAgc3ViamVjdElkOiBudWxsLAogICAgICAgIHBhcGVyVHlwZTogMSwKICAgICAgICBsaW1pdERhdGVUaW1lOiBudWxsLAogICAgICAgIG5hbWU6ICcnLAogICAgICAgIHN1Z2dlc3RUaW1lOiBudWxsLAogICAgICAgIHF1ZXN0aW9uU2VsZWN0SXRlbXM6IFt7CiAgICAgICAgICBudW06IG51bGwsCiAgICAgICAgICBsZXZlbDogbnVsbCwKICAgICAgICAgIHN1YmplY3RJZDogbnVsbCwKICAgICAgICAgIHF1ZXN0aW9uVHlwZTogbnVsbAogICAgICAgIH1dCiAgICAgIH07CiAgICB9LAogICAgY2xvc2VEaWFsb2cxOiBmdW5jdGlvbiBjbG9zZURpYWxvZzEoKSB7fSwKICAgIC8v6K6h566X5YiG5pWwCgogICAgLyogIGNvbXB1dGVTY29yZSgpewogICAgICAgIGxldCBzY29yZXM9MAogICAgICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5mb3JtLnRpdGxlSXRlbXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICBsZXQgc2NvcmU9IE51bWJlcih0aGlzLmZvcm0udGl0bGVJdGVtc1tpXS5zY29yZSk7CiAgICAgICAgICAgICBsZXQgbGVuPXRoaXMuZm9ybS50aXRsZUl0ZW1zW2ldLnF1ZXN0aW9uSXRlbXMubGVuZ3RoOwogICAgICAgICAgICAgY29uc29sZS5sb2coc2NvcmUqbGVuKTsKICAgICAgICAgICAgICBsZXQgc3VtPXNjb3JlKmxlbjsKICAgICAgICAgICAgIHNjb3Jlcz1zY29yZStzdW07CiAgICAgICAgICAgICBjb25zb2xlLmxvZyhzY29yZXMpOwogICAgICAgICAgIH0KICAgICAgICAgICB0aGlzLmZvcm0uc2NvcmVzPXNjb3JlczsKICAgICAgfSwqLwogICAgLy/mqKHmnb8KICAgIHRDbGljazE6IGZ1bmN0aW9uIHRDbGljazEoKSB7CiAgICAgIHRoaXMudGVtcGxhdGUxLnNob3dEaWFsb2cgPSB0cnVlOwogICAgfSwKICAgIHRDbGljazI6IGZ1bmN0aW9uIHRDbGljazIoKSB7CiAgICAgIHRoaXMudGVtcGxhdGUyLnNob3dEaWFsb2cgPSB0cnVlOwogICAgfSwKICAgIHRDbGljazM6IGZ1bmN0aW9uIHRDbGljazMoKSB7CiAgICAgIHRoaXMudGVtcGxhdGUzLnNob3dEaWFsb2cgPSB0cnVlOwogICAgfSwKICAgIGNvbmZpcm1UMTogZnVuY3Rpb24gY29uZmlybVQxKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMudGVtcGxhdGUxLnR5cGVQYWdlLnN1YmplY3RJZCA9IHRoaXMuZm9ybS5zdWJqZWN0SWQ7CiAgICAgIHRoaXMudGVtcGxhdGUxLnR5cGVQYWdlLnN1Z2dlc3RUaW1lID0gdGhpcy5mb3JtLnN1Z2dlc3RUaW1lOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRlbXBsYXRlMS50eXBlUGFnZS5xdWVzdGlvblNlbGVjdEl0ZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpcy50ZW1wbGF0ZTEudHlwZVBhZ2UucXVlc3Rpb25TZWxlY3RJdGVtc1tpXS5uYW1lID0gJyc7CiAgICAgICAgdGhpcy50ZW1wbGF0ZTEudHlwZVBhZ2UucXVlc3Rpb25TZWxlY3RJdGVtc1tpXS5zdWJqZWN0SWQgPSB0aGlzLmZvcm0uc3ViamVjdElkOyAvLyB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXNbaV0ucXVlc3Rpb25UeXBlPSB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXMucXVlc3Rpb25UeXBlOwogICAgICB9IC8vIGNvbnNvbGUubG9nKHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UpCgoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGV4YW1QYXBlckFwaS5hdXRvKHRoaXMudGVtcGxhdGUxLnR5cGVQYWdlKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgdmFyIHJlID0gZGF0YS5yZXNwb25zZTsgLy8gdGhpcy5hdXRvZm9ybS50aXRsZUl0ZW1zLnF1ZXN0aW9uSXRlbXM9W10KCiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgcmUudGl0bGVJdGVtcy5sZW5ndGg7IF9pMisrKSB7CiAgICAgICAgICB2YXIgdG1wID0gcmUudGl0bGVJdGVtc1tfaTJdLnF1ZXN0aW9uSXRlbXM7CiAgICAgICAgICB2YXIgX3Njb3JlID0gcmUudGl0bGVJdGVtc1tfaTJdLnNjb3JlOwoKICAgICAgICAgIF90aGlzNS5mb3JtLnRpdGxlSXRlbXMucHVzaCh7CiAgICAgICAgICAgIG5hbWU6ICcnLAogICAgICAgICAgICBxdWVzdGlvbkl0ZW1zOiB0bXAsCiAgICAgICAgICAgIHNjb3JlOiBfc2NvcmUKICAgICAgICAgIH0pOwogICAgICAgIH0gLy8gY29uc29sZS5sb2codGhpcy5mb3JtLnRpdGxlSXRlbXMpCgogICAgICB9KTsgLy90aGlzLiRyZWZzWydhdXRvUGFnZSddLnJlc2V0RmllbGRzKCkgIC8vIOi/memHjOWPr+S7peaNouWBmuenu+mZpOagt+W8j+eahOaWueazlWNsZWFyVmFsaWRhdGUKICAgICAgLy8gdGhpcy5hdXRvUGFnZS50eXBlUGFnZSA9IGNvcHlQcm9wcyh0aGlzLmF1dG9QYWdlLnR5cGVQYWdlKSAgCgogICAgICB0aGlzLnRlbXBsYXRlMS5zaG93RGlhbG9nID0gZmFsc2U7CiAgICB9LAogICAgY29uZmlybVQyOiBmdW5jdGlvbiBjb25maXJtVDIoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdGhpcy50ZW1wbGF0ZTIudHlwZVBhZ2Uuc3ViamVjdElkID0gdGhpcy5mb3JtLnN1YmplY3RJZDsKICAgICAgdGhpcy50ZW1wbGF0ZTIudHlwZVBhZ2Uuc3VnZ2VzdFRpbWUgPSB0aGlzLmZvcm0uc3VnZ2VzdFRpbWU7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGVtcGxhdGUyLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLnRlbXBsYXRlMi50eXBlUGFnZS5xdWVzdGlvblNlbGVjdEl0ZW1zW2ldLm5hbWUgPSAnJzsKICAgICAgICB0aGlzLnRlbXBsYXRlMi50eXBlUGFnZS5xdWVzdGlvblNlbGVjdEl0ZW1zW2ldLnN1YmplY3RJZCA9IHRoaXMuZm9ybS5zdWJqZWN0SWQ7IC8vIHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UucXVlc3Rpb25TZWxlY3RJdGVtc1tpXS5xdWVzdGlvblR5cGU9IHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UucXVlc3Rpb25TZWxlY3RJdGVtcy5xdWVzdGlvblR5cGU7CiAgICAgIH0gLy8gY29uc29sZS5sb2codGhpcy5hdXRvUGFnZS50eXBlUGFnZSkKCgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgZXhhbVBhcGVyQXBpLmF1dG8odGhpcy50ZW1wbGF0ZTIudHlwZVBhZ2UpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB2YXIgcmUgPSBkYXRhLnJlc3BvbnNlOyAvLyB0aGlzLmF1dG9mb3JtLnRpdGxlSXRlbXMucXVlc3Rpb25JdGVtcz1bXQoKICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCByZS50aXRsZUl0ZW1zLmxlbmd0aDsgX2kzKyspIHsKICAgICAgICAgIHZhciB0bXAgPSByZS50aXRsZUl0ZW1zW19pM10ucXVlc3Rpb25JdGVtczsKICAgICAgICAgIHZhciBfc2NvcmUgPSByZS50aXRsZUl0ZW1zW19pM10uc2NvcmU7CgogICAgICAgICAgX3RoaXM2LmZvcm0udGl0bGVJdGVtcy5wdXNoKHsKICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgIHF1ZXN0aW9uSXRlbXM6IHRtcCwKICAgICAgICAgICAgc2NvcmU6IF9zY29yZQogICAgICAgICAgfSk7CiAgICAgICAgfSAvLyBjb25zb2xlLmxvZyh0aGlzLmZvcm0udGl0bGVJdGVtcykKCiAgICAgIH0pOyAvL3RoaXMuJHJlZnNbJ2F1dG9QYWdlJ10ucmVzZXRGaWVsZHMoKSAgLy8g6L+Z6YeM5Y+v5Lul5o2i5YGa56e76Zmk5qC35byP55qE5pa55rOVY2xlYXJWYWxpZGF0ZQogICAgICAvLyB0aGlzLmF1dG9QYWdlLnR5cGVQYWdlID0gY29weVByb3BzKHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UpICAKCiAgICAgIHRoaXMudGVtcGxhdGUyLnNob3dEaWFsb2cgPSBmYWxzZTsKICAgIH0sCiAgICBjb25maXJtVDM6IGZ1bmN0aW9uIGNvbmZpcm1UMygpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICB0aGlzLnRlbXBsYXRlMy50eXBlUGFnZS5zdWJqZWN0SWQgPSB0aGlzLmZvcm0uc3ViamVjdElkOwogICAgICB0aGlzLnRlbXBsYXRlMy50eXBlUGFnZS5zdWdnZXN0VGltZSA9IHRoaXMuZm9ybS5zdWdnZXN0VGltZTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50ZW1wbGF0ZTMudHlwZVBhZ2UucXVlc3Rpb25TZWxlY3RJdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMudGVtcGxhdGUzLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXNbaV0ubmFtZSA9ICcnOwogICAgICAgIHRoaXMudGVtcGxhdGUzLnR5cGVQYWdlLnF1ZXN0aW9uU2VsZWN0SXRlbXNbaV0uc3ViamVjdElkID0gdGhpcy5mb3JtLnN1YmplY3RJZDsgLy8gdGhpcy5hdXRvUGFnZS50eXBlUGFnZS5xdWVzdGlvblNlbGVjdEl0ZW1zW2ldLnF1ZXN0aW9uVHlwZT0gdGhpcy5hdXRvUGFnZS50eXBlUGFnZS5xdWVzdGlvblNlbGVjdEl0ZW1zLnF1ZXN0aW9uVHlwZTsKICAgICAgfSAvLyBjb25zb2xlLmxvZyh0aGlzLmF1dG9QYWdlLnR5cGVQYWdlKQoKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBleGFtUGFwZXJBcGkuYXV0byh0aGlzLnRlbXBsYXRlMy50eXBlUGFnZSkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIHZhciByZSA9IGRhdGEucmVzcG9uc2U7IC8vIHRoaXMuYXV0b2Zvcm0udGl0bGVJdGVtcy5xdWVzdGlvbkl0ZW1zPVtdCgogICAgICAgIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IHJlLnRpdGxlSXRlbXMubGVuZ3RoOyBfaTQrKykgewogICAgICAgICAgdmFyIHRtcCA9IHJlLnRpdGxlSXRlbXNbX2k0XS5xdWVzdGlvbkl0ZW1zOwogICAgICAgICAgdmFyIF9zY29yZSA9IHJlLnRpdGxlSXRlbXNbX2k0XS5zY29yZTsKCiAgICAgICAgICBfdGhpczcuZm9ybS50aXRsZUl0ZW1zLnB1c2goewogICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgcXVlc3Rpb25JdGVtczogdG1wLAogICAgICAgICAgICBzY29yZTogX3Njb3JlCiAgICAgICAgICB9KTsKICAgICAgICB9IC8vIGNvbnNvbGUubG9nKHRoaXMuZm9ybS50aXRsZUl0ZW1zKQoKICAgICAgfSk7IC8vdGhpcy4kcmVmc1snYXV0b1BhZ2UnXS5yZXNldEZpZWxkcygpICAvLyDov5nph4zlj6/ku6XmjaLlgZrnp7vpmaTmoLflvI/nmoTmlrnms5VjbGVhclZhbGlkYXRlCiAgICAgIC8vIHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UgPSBjb3B5UHJvcHModGhpcy5hdXRvUGFnZS50eXBlUGFnZSkgIAoKICAgICAgdGhpcy50ZW1wbGF0ZTMuc2hvd0RpYWxvZyA9IGZhbHNlOwogICAgfSwKICAgIGxldmVsQ2hhbmdlOiBmdW5jdGlvbiBsZXZlbENoYW5nZSgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICB0aGlzLmZvcm0uc3ViamVjdElkID0gbnVsbDsKICAgICAgdGhpcy5zdWJqZWN0RmlsdGVyID0gdGhpcy5zdWJqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICByZXR1cm4gZGF0YS5sZXZlbCA9PT0gX3RoaXM4LmZvcm0ubGV2ZWw7CiAgICAgIH0pOwogICAgfSwKICAgIHNlYXJjaDogZnVuY3Rpb24gc2VhcmNoKCkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLnF1ZXJ5UGFyYW0uc3ViamVjdElkID0gdGhpcy5mb3JtLnN1YmplY3RJZDsKICAgICAgdGhpcy5xdWVzdGlvblBhZ2UubGlzdExvYWRpbmcgPSB0cnVlOwogICAgICBxdWVzdGlvbkFwaS5wYWdlTGlzdCh0aGlzLnF1ZXN0aW9uUGFnZS5xdWVyeVBhcmFtKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgdmFyIHJlID0gZGF0YS5yZXNwb25zZTsKICAgICAgICBfdGhpczkucXVlc3Rpb25QYWdlLnRhYmxlRGF0YSA9IHJlLmxpc3Q7CiAgICAgICAgX3RoaXM5LnF1ZXN0aW9uUGFnZS50b3RhbCA9IHJlLnRvdGFsOwogICAgICAgIF90aGlzOS5xdWVzdGlvblBhZ2UucXVlcnlQYXJhbS5wYWdlSW5kZXggPSByZS5wYWdlTnVtOwogICAgICAgIF90aGlzOS5xdWVzdGlvblBhZ2UubGlzdExvYWRpbmcgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlU2VsZWN0aW9uQ2hhbmdlOiBmdW5jdGlvbiBoYW5kbGVTZWxlY3Rpb25DaGFuZ2UodmFsKSB7CiAgICAgIHRoaXMucXVlc3Rpb25QYWdlLm11bHRpcGxlU2VsZWN0aW9uID0gdmFsOwogICAgfSwKICAgIHF1ZXN0aW9uVHlwZUZvcm1hdHRlcjogZnVuY3Rpb24gcXVlc3Rpb25UeXBlRm9ybWF0dGVyKHJvdywgY29sdW1uLCBjZWxsVmFsdWUsIGluZGV4KSB7CiAgICAgIHJldHVybiB0aGlzLmVudW1Gb3JtYXQodGhpcy5xdWVzdGlvblR5cGVFbnVtLCBjZWxsVmFsdWUpOwogICAgfSwKICAgIHN1YmplY3RGb3JtYXR0ZXI6IGZ1bmN0aW9uIHN1YmplY3RGb3JtYXR0ZXIocm93LCBjb2x1bW4sIGNlbGxWYWx1ZSwgaW5kZXgpIHsKICAgICAgcmV0dXJuIHRoaXMuc3ViamVjdEVudW1Gb3JtYXQoY2VsbFZhbHVlKTsKICAgIH0sCiAgICByZXNldEZvcm06IGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHsKICAgICAgdGhpcy4kcmVmc1snZm9ybSddLnJlc2V0RmllbGRzKCk7CiAgICAgIHRoaXMuZm9ybSA9IHsKICAgICAgICBpZDogbnVsbCwKICAgICAgICBsZXZlbDogbnVsbCwKICAgICAgICBzdWJqZWN0SWQ6IG51bGwsCiAgICAgICAgcGFwZXJUeXBlOiAxLAogICAgICAgIGxpbWl0RGF0ZVRpbWU6IFtdLAogICAgICAgIG5hbWU6ICcnLAogICAgICAgIHN1Z2dlc3RUaW1lOiBudWxsLAogICAgICAgIHRpdGxlSXRlbXM6IFtdCiAgICAgIH07CiAgICAgIHRoaXMuYXV0b1BhZ2UudHlwZVBhZ2UgPSB7CiAgICAgICAgdHlwZUl0ZW1zOiBbewogICAgICAgICAgbnVtOiBudWxsLAogICAgICAgICAgbGV2ZWw6IG51bGwsCiAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgIHR5cGVJdGVtczogW10KICAgICAgICB9XSwKICAgICAgICBzdWJqZWN0SWQ6IG51bGwsCiAgICAgICAgcGFwZXJUeXBlOiAxLAogICAgICAgIGxpbWl0RGF0ZVRpbWU6IG51bGwsCiAgICAgICAgbmFtZTogJycsCiAgICAgICAgc3VnZ2VzdFRpbWU6IG51bGwsCiAgICAgICAgcXVlc3Rpb25TZWxlY3RJdGVtczogW3sKICAgICAgICAgIG51bTogbnVsbCwKICAgICAgICAgIGxldmVsOiBudWxsLAogICAgICAgICAgc3ViamVjdElkOiBudWxsLAogICAgICAgICAgcXVlc3Rpb25UeXBlOiBudWxsCiAgICAgICAgfV0KICAgICAgfTsKICAgIH0KICB9LCBtYXBBY3Rpb25zKCdleGFtJywgewogICAgaW5pdFN1YmplY3Q6ICdpbml0U3ViamVjdCcKICB9KSksIG1hcEFjdGlvbnMoJ3RhZ3NWaWV3JywgewogICAgZGVsQ3VycmVudFZpZXc6ICdkZWxDdXJyZW50VmlldycKICB9KSksCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcEdldHRlcnMoJ2VudW1JdGVtJywgWydlbnVtRm9ybWF0J10pKSwgbWFwU3RhdGUoJ2VudW1JdGVtJywgewogICAgcXVlc3Rpb25UeXBlRW51bTogZnVuY3Rpb24gcXVlc3Rpb25UeXBlRW51bShzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuZXhhbS5xdWVzdGlvbi50eXBlRW51bTsKICAgIH0sCiAgICBwYXBlclR5cGVFbnVtOiBmdW5jdGlvbiBwYXBlclR5cGVFbnVtKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5leGFtLmV4YW1QYXBlci5wYXBlclR5cGVFbnVtOwogICAgfSwKICAgIGxldmVsRW51bTogZnVuY3Rpb24gbGV2ZWxFbnVtKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS51c2VyLmxldmVsRW51bTsKICAgIH0KICB9KSksIG1hcFN0YXRlKCdleGFtJywgewogICAgc3ViamVjdHM6IGZ1bmN0aW9uIHN1YmplY3RzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5zdWJqZWN0czsKICAgIH0KICB9KSksIHt9LCB7CiAgICAvKm1heFZhbHVlKCl7CiAgICAgIHJldHVybiAn5pyA5aSa6L6T5YWlJyt0aGlzLnF1ZXN0aW9uUGFnZS50b3RhbAogICAgfSwKICAgICovCiAgICAvL+ebkeWQrOWvueixoeWxnuaAp+WPmOWMlgogICAgdGl0bGVJdGVtczogZnVuY3Rpb24gdGl0bGVJdGVtcygpIHsKICAgICAgcmV0dXJuIHRoaXMuZm9ybS50aXRsZUl0ZW1zOwogICAgfSwKICAgIHNjb3JlczogZnVuY3Rpb24gc2NvcmVzKCkgewogICAgICB2YXIgc2NvcmVzID0gMDsKICAgICAgY29uc29sZS5sb2codGhpcy5mb3JtLnRpdGxlSXRlbXMubGVuZ3RoKTsKICAgICAgY29uc29sZS5sb2codGhpcy5mb3JtLnRpdGxlSXRlbXMpOwoKICAgICAgaWYgKHRoaXMuZm9ybS50aXRsZUl0ZW1zLmxlbmd0aCA+IDApIHsKICAgICAgICBpZiAodGhpcy5mb3JtLnRpdGxlSXRlbXNbMF0ucXVlc3Rpb25JdGVtcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBzY29yZXMgPSAwOwogICAgICAgICAgY29uc29sZS5sb2coc2NvcmVzKTsKCiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZm9ybS50aXRsZUl0ZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBzY29yZSA9IE51bWJlcih0aGlzLmZvcm0udGl0bGVJdGVtc1tpXS5zY29yZSk7CiAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLmZvcm0udGl0bGVJdGVtc1tpXS5xdWVzdGlvbkl0ZW1zLmxlbmd0aDsgLy8gY29uc29sZS5sb2coc2NvcmUqbGVuKTsKCiAgICAgICAgICAgIHZhciBzdW0gPSBzY29yZSAqIGxlbjsKICAgICAgICAgICAgY29uc29sZS5sb2cobGVuKTsKICAgICAgICAgICAgY29uc29sZS5sb2coc2NvcmUpOwogICAgICAgICAgICBzY29yZXMgPSBzY29yZXMgKyBzdW07CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNjb3Jlcyk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5mb3JtLnNjb3JlcyA9IHNjb3JlczsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBzY29yZXM7CiAgICB9CiAgfSkKfTs="},null]}