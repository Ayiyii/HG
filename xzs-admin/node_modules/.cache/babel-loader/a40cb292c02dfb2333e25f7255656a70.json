{"remainingRequest":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/thread-loader/dist/cjs.js!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/babel-loader/lib/index.js!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/question/edit/multiple-choice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/src/views/exam/question/edit/multiple-choice.vue","mtime":1622108053850},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cynthiachen/project/graduation_design/xzs/xzs-mysql/source/vue/xzs-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudXJsIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2N5bnRoaWFjaGVuL3Byb2plY3QvZ3JhZHVhdGlvbl9kZXNpZ24veHpzL3h6cy1teXNxbC9zb3VyY2UvdnVlL3h6cy1hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9jeW50aGlhY2hlbi9wcm9qZWN0L2dyYWR1YXRpb25fZGVzaWduL3h6cy94enMtbXlzcWwvc291cmNlL3Z1ZS94enMtYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgUXVlc3Rpb25TaG93IGZyb20gJy4uL2NvbXBvbmVudHMvU2hvdyc7CmltcG9ydCBVZWRpdG9yIGZyb20gJ0AvY29tcG9uZW50cy9VZWRpdG9yJzsKaW1wb3J0IHsgbWFwR2V0dGVycywgbWFwU3RhdGUsIG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHF1ZXN0aW9uQXBpIGZyb20gJ0AvYXBpL3F1ZXN0aW9uJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIFVlZGl0b3I6IFVlZGl0b3IsCiAgICBRdWVzdGlvblNob3c6IFF1ZXN0aW9uU2hvdwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGZvcm06IHsKICAgICAgICBpZDogbnVsbCwKICAgICAgICBxdWVzdGlvblR5cGU6IDIsCiAgICAgICAgZ3JhZGVMZXZlbDogbnVsbCwKICAgICAgICBzdWJqZWN0SWQ6IG51bGwsCiAgICAgICAgdGl0bGU6ICcnLAogICAgICAgIHZpZGVvUGF0aDogJycsCiAgICAgICAgYXVkaW9QYXRoOiAnJywKICAgICAgICBpbWFnZVBhdGg6ICcnLAogICAgICAgIGl0ZW1zOiBbewogICAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgICBwcmVmaXg6ICdBJywKICAgICAgICAgIGNvbnRlbnQ6ICcnCiAgICAgICAgfSwgewogICAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgICBwcmVmaXg6ICdCJywKICAgICAgICAgIGNvbnRlbnQ6ICcnCiAgICAgICAgfSwgewogICAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgICBwcmVmaXg6ICdDJywKICAgICAgICAgIGNvbnRlbnQ6ICcnCiAgICAgICAgfSwgewogICAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgICBwcmVmaXg6ICdEJywKICAgICAgICAgIGNvbnRlbnQ6ICcnCiAgICAgICAgfV0sCiAgICAgICAgYW5hbHl6ZTogJycsCiAgICAgICAgY29ycmVjdDogJycsCiAgICAgICAgY29ycmVjdEFycmF5OiBbXSwKICAgICAgICBzY29yZTogJycsCiAgICAgICAgZGlmZmljdWx0OiAwLAogICAgICAgIGNoYXB0ZXJJZDogJycsCiAgICAgICAgc2VjcmV0OiBmYWxzZQogICAgICB9LAogICAgICBzdWJqZWN0RmlsdGVyOiBudWxsLAogICAgICBmb3JtTG9hZGluZzogZmFsc2UsCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgZ3JhZGVMZXZlbDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeW5tOe6pycsCiAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICAgIH1dLAogICAgICAgIHN1YmplY3RJZDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeWtpuenkScsCiAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICAgIH1dLAogICAgICAgIHRpdGxlOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn6K+36L6T5YWl6aKY5bmyJywKICAgICAgICAgIHRyaWdnZXI6ICdibHVyJwogICAgICAgIH1dLAogICAgICAgIGFuYWx5emU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXop6PmnpAnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgc2NvcmU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXliIbmlbAnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgY29ycmVjdEFycmF5OiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn6K+36YCJ5oup5q2j56Gu562U5qGIJywKICAgICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgICAgfV0KICAgICAgfSwKICAgICAgcmljaEVkaXRvcjogewogICAgICAgIGRpYWxvZ1Zpc2libGU6IGZhbHNlLAogICAgICAgIG9iamVjdDogbnVsbCwKICAgICAgICBwYXJhbWV0ZXJOYW1lOiAnJywKICAgICAgICBpbnN0YW5jZTogbnVsbAogICAgICB9LAogICAgICBxdWVzdGlvblNob3c6IHsKICAgICAgICBxVHlwZTogMCwKICAgICAgICBkaWFsb2c6IGZhbHNlLAogICAgICAgIHF1ZXN0aW9uOiBudWxsLAogICAgICAgIGxvYWRpbmc6IGZhbHNlCiAgICAgIH0sCiAgICAgIGNoYXB0ZXJTaG93OiB7CiAgICAgICAgY2hhcHRlcnM6IFtdLAogICAgICAgIG5ld0NoYXB0ZXI6ICcnLAogICAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICAgIHF1ZXJ5Q2hhOiB7CiAgICAgICAgICBwYWdlSW5kZXg6IDEsCiAgICAgICAgICBwYWdlU2l6ZTogMTAwLAogICAgICAgICAgc3ViamVjdElkOiAnJywKICAgICAgICAgIGdyYWRlTGV2ZWw6ICcnCiAgICAgICAgfSwKICAgICAgICBxdWVyeU5ld0NoYTogewogICAgICAgICAgaWQ6ICcnLAogICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICBzdWJqZWN0SWQ6ICcnLAogICAgICAgICAgZ3JhZGVMZXZlbDogJycsCiAgICAgICAgICBpbmZvOiAnJwogICAgICAgIH0sCiAgICAgICAgY2hhSWQ6IFtdLAogICAgICAgIHNvbWVTaG93OiB0cnVlCiAgICAgIH0KICAgIH07CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIGlkID0gdGhpcy4kcm91dGUucXVlcnkuaWQ7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB0aGlzLmluaXRTdWJqZWN0KGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc3ViamVjdEZpbHRlciA9IF90aGlzLnN1YmplY3RzOwogICAgfSk7CgogICAgaWYgKGlkICYmIHBhcnNlSW50KGlkKSAhPT0gMCkgewogICAgICBfdGhpcy5mb3JtTG9hZGluZyA9IHRydWU7CiAgICAgIHRoaXMuaW5pdChpZCk7CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgJ2NoYXB0ZXJTaG93Lm5ld0NoYXB0ZXInOiBmdW5jdGlvbiBjaGFwdGVyU2hvd05ld0NoYXB0ZXIobmV3VmFsKSB7CiAgICAgIGlmIChuZXdWYWwpIHsKICAgICAgICB0aGlzLm5ld0NoYXB0ZXIgPSBuZXdWYWw7CiAgICAgICAgdGhpcy5wb3N0Q2hhcHRlcigpOwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoewogICAgaW5pdDogZnVuY3Rpb24gaW5pdChpZCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gcXVlc3Rpb25BcGkuc2VsZWN0KGlkKS50aGVuKGZ1bmN0aW9uIChyZSkgewogICAgICAgICAgICAgICAgICBfdGhpczIuZm9ybSA9IHJlLnJlc3BvbnNlOwogICAgICAgICAgICAgICAgICBfdGhpczIuY2hhcHRlclNob3cucXVlcnlOZXdDaGEuc3ViamVjdElkID0gX3RoaXMyLmZvcm0uc3ViamVjdElkOwogICAgICAgICAgICAgICAgICBfdGhpczIuY2hhcHRlclNob3cucXVlcnlDaGEuc3ViamVjdElkID0gX3RoaXMyLmZvcm0uc3ViamVjdElkOyAvL+ino+WGs+W3suacieefpeivhueCueeahOaYvuekuumXrumimO+8jGVsZW1lbnQtdWkgc2VsZWN057uE5Lu25Lya6Ieq5Yqo5Yy56YWNIOS8oOWFpeeahOWAvCDlkowgdmFsdWXlgLws5aaC5p6c55u4562JIOWImeaYvuekuuatpHZhbHVl5omA5a+55bqU55qEbGFiZWzlgLwKCiAgICAgICAgICAgICAgICAgIF90aGlzMi5jaGFwdGVyU2hvdy5uZXdDaGFwdGVyID0gcGFyc2VJbnQoX3RoaXMyLmZvcm0uY2hhcHRlcklkKTsKICAgICAgICAgICAgICAgICAgX3RoaXMyLmZvcm1Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGN1cnJTdGF0aW9uQ2hhbmdlOiBmdW5jdGlvbiBjdXJyU3RhdGlvbkNoYW5nZSh2YWwpIHsKICAgICAgY29uc29sZS5sb2coJ2N1cnJTdGF0aW9uQ2hhbmdlJywgdmFsKTsKCiAgICAgIGlmICh2YWwpIHsKICAgICAgICB0aGlzLmNoYXB0ZXJTaG93LnF1ZXJ5TmV3Q2hhLnN1YmplY3RJZCA9IHZhbDsKICAgICAgICB0aGlzLmNoYXB0ZXJTaG93LnF1ZXJ5Q2hhLnN1YmplY3RJZCA9IHZhbDsgLy8gY29uc29sZS5sb2codGhpcy5jaGFwdGVyU2hvdy5xdWVyeU5ld0NoYS5zdWJqZWN0SWQpCgogICAgICAgIHRoaXMuZ2V0Q2hhcHRlcigpOyAvLyB0aGlzLnBvc3RDaGFwdGVyKCkKICAgICAgfQogICAgfSwKICAgIC8vY2hhbmdlKCl7IHRoaXMuJGZvcmNlVXBkYXRlKCkgfSwgCiAgICBnZXRDaGFwdGVyOiBmdW5jdGlvbiBnZXRDaGFwdGVyKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHF1ZXN0aW9uQXBpLmNoYXB0ZXJMaXN0KHRoaXMuY2hhcHRlclNob3cucXVlcnlDaGEpLnRoZW4oZnVuY3Rpb24gKHJlKSB7CiAgICAgICAgdmFyIGxpc3QgPSByZS5yZXNwb25zZS5saXN0OwogICAgICAgIHZhciBsaXN0MSA9IFtdOyAvL2xldCBjaGFJZD1bXTsKICAgICAgICAvL+WOu+mZpOepuumhuQoKICAgICAgICBfdGhpczMuY2hhSWQgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBfdGhpczMuY2hhSWQucHVzaChsaXN0W2ldLmlkKTsKCiAgICAgICAgICBpZiAobGlzdFtpXS5uYW1lKSB7CiAgICAgICAgICAgIGxpc3QxLnB1c2gobGlzdFtpXSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBfdGhpczMuY2hhcHRlclNob3cuY2hhcHRlcnMgPSBsaXN0MTsKICAgICAgICBfdGhpczMuZm9ybS5jaGFwdGVySWQgPSBTdHJpbmcoX3RoaXMzLmNoYXB0ZXJTaG93LmNoYXB0ZXJzWzBdLmlkKTsgLy8gIGNvbnNvbGUubG9nKHRoaXMuY2hhSWQpCiAgICAgIH0pOwogICAgfSwKICAgIHBvc3RDaGFwdGVyOiBmdW5jdGlvbiBwb3N0Q2hhcHRlcigpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICAvL2NvbnNvbGUubG9nKHZhbCkKICAgICAgaWYgKHRoaXMubmV3Q2hhcHRlciAhPSAnJykgewogICAgICAgIC8v6Kej5Yaz55+l6K+G54K56YeN5aSNcG9zdAogICAgICAgIGlmICh0aGlzLmNoYUlkLmluY2x1ZGVzKE51bWJlcih0aGlzLm5ld0NoYXB0ZXIpKSA9PSBmYWxzZSkgewogICAgICAgICAgdGhpcy5jaGFwdGVyU2hvdy5xdWVyeU5ld0NoYS5uYW1lID0gdGhpcy5uZXdDaGFwdGVyOyAvLyAKCiAgICAgICAgICBxdWVzdGlvbkFwaS5pbnNlcnRDaGFwdGVyKHRoaXMuY2hhcHRlclNob3cucXVlcnlOZXdDaGEpLnRoZW4oZnVuY3Rpb24gKHJlKSB7CiAgICAgICAgICAgIGlmIChyZS5jb2RlID09IDEpIHsKICAgICAgICAgICAgICBfdGhpczQuZ2V0Q2hhcHRlcigpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsgLy9jb25zb2xlLmxvZyh0aGlzLmZvcm0uY2hhcHRlcklkKQogICAgICAgICAgLy9pZigpCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZ2V0SW1hZ2U6IGZ1bmN0aW9uIGdldEltYWdlKGV2LCB0eXBlcikgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHZhciB0aGF0ID0gdGhpczsgLy/ojrflj5bkuIrkvKDmlofku7bmoIfnrb4KCiAgICAgIHZhciBmaWxlc0lkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcF9pbWFnZScpOyAvL+iOt+WPlumfs+mikeagh+etvgoKICAgICAgdmFyIGltYWdlSWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1hZ2VJZCcpOyAvL+aKiuW9k+WJjWZpbGVzWzBd5Lyg57uZZ2V0RmlsZVVSTOaWueazle+8jCBnZXRGaWxlVVJM5pa55rOV5a+55YW25YGa5LiA5aSE55CGCgogICAgICB0aGF0LmZvcm0uaW1hZ2VQYXRoID0gdGhpcy5nZXRGaWxlVVJMKGZpbGVzSWQuZmlsZXNbMF0pOwogICAgICBjb25zb2xlLmxvZyh0aGF0LmZvcm0uaW1hZ2VQYXRoKTsgLy8gaWYgKHRoaXMudmlkZW9VcmwpIHsKICAgICAgLy/nu5l2aWRlb+agh+etvuiuvue9rnNyYwogICAgICAvLyAgIHZpZGVvSWQuc3JjID0gdGhpcy52aWRlb1VybAogICAgICAvLyAgIGNvbnNvbGUubG9nKHZpZGVvSWQuc3JjKQogICAgICAvLyB9CgogICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJtdWx0aXBhcnRGaWxlIiwgZmlsZXNJZC5maWxlc1swXSk7CiAgICAgIHF1ZXN0aW9uQXBpLmltYWdlUG9zdChmb3JtRGF0YSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzKTsKCiAgICAgICAgaWYgKHJlcy5jb2RlID09PSAxKSB7CiAgICAgICAgICBfdGhpczUuZm9ybS5pbWFnZVBhdGggPSAnaHR0cDovLzQ3Ljk3LjE1Mi4yMTk6ODAwMCcgKyByZXMucmVzcG9uc2U7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgY29uc29sZS5sb2codXJsKTsKICAgIH0sCiAgICBnZXRWaWRlbzogZnVuY3Rpb24gZ2V0VmlkZW8oZXYsIHR5cGVyKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIHRoYXQgPSB0aGlzOyAvL+iOt+WPluS4iuS8oOaWh+S7tuagh+etvgoKICAgICAgdmFyIGZpbGVzSWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wX3ZpZGVvJyk7IC8v6I635Y+W6Z+z6aKR5qCH562+CgogICAgICB2YXIgdmlkZW9JZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWRlb0lkJyk7IC8v5oqK5b2T5YmNZmlsZXNbMF3kvKDnu5lnZXRGaWxlVVJM5pa55rOV77yMIGdldEZpbGVVUkzmlrnms5Xlr7nlhbblgZrkuIDlpITnkIYKCiAgICAgIHRoYXQuZm9ybS52aWRlb1BhdGggPSB0aGlzLmdldEZpbGVVUkwoZmlsZXNJZC5maWxlc1swXSk7CiAgICAgIGNvbnNvbGUubG9nKHRoYXQuZm9ybS52aWRlb1BhdGgpOyAvLyBpZiAodGhpcy52aWRlb1VybCkgewogICAgICAvL+e7mXZpZGVv5qCH562+6K6+572uc3JjCiAgICAgIC8vICAgdmlkZW9JZC5zcmMgPSB0aGlzLnZpZGVvVXJsCiAgICAgIC8vICAgY29uc29sZS5sb2codmlkZW9JZC5zcmMpCiAgICAgIC8vIH0KCiAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoIm11bHRpcGFydEZpbGUiLCBmaWxlc0lkLmZpbGVzWzBdKTsKICAgICAgcXVlc3Rpb25BcGkudmlkZW9Qb3N0KGZvcm1EYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBjb25zb2xlLmxvZyhyZXMpOwoKICAgICAgICBpZiAocmVzLmNvZGUgPT09IDEpIHsKICAgICAgICAgIF90aGlzNi5mb3JtLnZpZGVvUGF0aCA9ICdodHRwOi8vNDcuOTcuMTUyLjIxOTo4MDAwJyArIHJlcy5yZXNwb25zZTsKICAgICAgICAgIGNvbnNvbGUubG9nKF90aGlzNi5mb3JtLnZpZGVvUGF0aCk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgY29uc29sZS5sb2codXJsKTsKICAgIH0sCiAgICBnZXRBdWRpbzogZnVuY3Rpb24gZ2V0QXVkaW8oZXYsIHR5cGVyKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdmFyIHRhaHQgPSB0aGlzOyAvL+iOt+WPluS4iuS8oOaWh+S7tuagh+etvgoKICAgICAgdmFyIGZpbGVzSWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wX2F1ZGlvJyk7IC8v6I635Y+W6Z+z6aKR5qCH562+CgogICAgICB2YXIgYXVkaW9JZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdWRpb0lkJyk7IC8v5oqK5b2T5YmNZmlsZXNbMF3kvKDnu5lnZXRGaWxlVVJM5pa55rOV77yMIGdldEZpbGVVUkzmlrnms5Xlr7nlhbblgZrkuIDlpITnkIYKCiAgICAgIHRoaXMuZm9ybS5hdWRpb1BhdGggPSB0aGlzLmdldEZpbGVVUkwoZmlsZXNJZC5maWxlc1swXSk7CiAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoIm11bHRpcGFydEZpbGUiLCBmaWxlc0lkLmZpbGVzWzBdKTsKICAgICAgcXVlc3Rpb25BcGkuYXVkaW9Qb3N0KGZvcm1EYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBjb25zb2xlLmxvZyhyZXMpOwoKICAgICAgICBpZiAocmVzLmNvZGUgPT09IDEpIHsKICAgICAgICAgIF90aGlzNy5mb3JtLmF1ZGlvUGF0aCA9ICdodHRwOi8vNDcuOTcuMTUyLjIxOTo4MDAwJyArIHJlcy5yZXNwb25zZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyh0aGlzLnZpZGlvVXJsKTsKICAgIH0sCiAgICBnZXRGaWxlVVJMOiBmdW5jdGlvbiBnZXRGaWxlVVJMKGZpbGUpIHsKICAgICAgdmFyIGdldFVybCA9IG51bGw7CgogICAgICBpZiAod2luZG93LmNyZWF0ZU9iamVjdFVSTCAhPSB1bmRlZmluZWQpIHsKICAgICAgICAvL2Jhc2ljCiAgICAgICAgZ2V0VXJsID0gd2luZG93LmNyZWF0ZU9iamVjdFVSTChmaWxlKTsKICAgICAgfSBlbHNlIGlmICh3aW5kb3cuVVJMICE9IHVuZGVmaW5lZCkgewogICAgICAgIC8vd2luZG93LlVSTCDmoIflh4blrprkuYkKICAgICAgICAvL21vemlsbGEoZmlyZWZveCkKICAgICAgICAvL+iOt+WPluS4gOS4qmh0dHDmoLzlvI/nmoR1cmzot6/lvoTvvIzov5nkuKrml7blgJnlsLHlj6/ku6Xorr7nva48aW1nPuS4reeahOaYvuekugogICAgICAgIGdldFVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpOwogICAgICB9IGVsc2UgaWYgKHdpbmRvdy53ZWJraXRVUkwgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgLy93aW5kb3cud2Via2l0VVJM5pivd2Via2l055qE5YaF5qC4CiAgICAgICAgLy93ZWJraXQgb3IgY2hyb21lCiAgICAgICAgZ2V0VXJsID0gd2luZG93LndlYmtpdFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRVcmw7IC8vdmlkZW8g5qCH562+55qEIGR1cmF0aW9u5bGe5oCn77yM6I635Y+W5b2T5YmN6KeG6aKR55qE6ZW/5bqmCiAgICAgIC8vIGxldCBkdXJhdGlvbiA9IHZpZGVvSWQuZHVyYXRpb24KICAgICAgLy8gaWYgKE1hdGguZmxvb3IoZHVyYXRpb24pID4gNjApIHsKICAgICAgLy8gIHRoYXQubGF5ZXIubXNnKCfop4bpopHkuI3og73lpKfkuo42MOenkicpCiAgICAgIC8vIH0gCiAgICB9LAogICAgZWRpdG9yUmVhZHk6IGZ1bmN0aW9uIGVkaXRvclJlYWR5KGluc3RhbmNlKSB7CiAgICAgIHRoaXMucmljaEVkaXRvci5pbnN0YW5jZSA9IGluc3RhbmNlOwogICAgICB2YXIgY3VycmVudENvbnRlbnQgPSB0aGlzLnJpY2hFZGl0b3Iub2JqZWN0W3RoaXMucmljaEVkaXRvci5wYXJhbWV0ZXJOYW1lXTsKICAgICAgdGhpcy5yaWNoRWRpdG9yLmluc3RhbmNlLnNldENvbnRlbnQoY3VycmVudENvbnRlbnQpOyAvLyDlhYnmoIflrprkvY3liLBVZWRpdG9yCgogICAgICB0aGlzLnJpY2hFZGl0b3IuaW5zdGFuY2UuZm9jdXModHJ1ZSk7CiAgICB9LAogICAgaW5wdXRDbGljazogZnVuY3Rpb24gaW5wdXRDbGljayhvYmplY3QsIHBhcmFtZXRlck5hbWUpIHsKICAgICAgdGhpcy5yaWNoRWRpdG9yLm9iamVjdCA9IG9iamVjdDsKICAgICAgdGhpcy5yaWNoRWRpdG9yLnBhcmFtZXRlck5hbWUgPSBwYXJhbWV0ZXJOYW1lOwogICAgICB0aGlzLnJpY2hFZGl0b3IuZGlhbG9nVmlzaWJsZSA9IHRydWU7CiAgICB9LAogICAgZWRpdG9yQ29uZmlybTogZnVuY3Rpb24gZWRpdG9yQ29uZmlybSgpIHsKICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLnJpY2hFZGl0b3IuaW5zdGFuY2UuZ2V0Q29udGVudCgpOwogICAgICB0aGlzLnJpY2hFZGl0b3Iub2JqZWN0W3RoaXMucmljaEVkaXRvci5wYXJhbWV0ZXJOYW1lXSA9IGNvbnRlbnQ7CiAgICAgIHRoaXMucmljaEVkaXRvci5kaWFsb2dWaXNpYmxlID0gZmFsc2U7CiAgICB9LAogICAgcXVlc3Rpb25JdGVtUmVtb3ZlOiBmdW5jdGlvbiBxdWVzdGlvbkl0ZW1SZW1vdmUoaW5kZXgpIHsKICAgICAgdGhpcy5mb3JtLml0ZW1zLnNwbGljZShpbmRleCwgMSk7CiAgICB9LAogICAgcXVlc3Rpb25JdGVtQWRkOiBmdW5jdGlvbiBxdWVzdGlvbkl0ZW1BZGQoKSB7CiAgICAgIHZhciBpdGVtcyA9IHRoaXMuZm9ybS5pdGVtczsKICAgICAgdmFyIGxhc3QgPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTsKICAgICAgdmFyIG5ld0xhc3RQcmVmaXggPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxhc3QucHJlZml4LmNoYXJDb2RlQXQoKSArIDEpOwogICAgICBpdGVtcy5wdXNoKHsKICAgICAgICBpZDogbnVsbCwKICAgICAgICBwcmVmaXg6IG5ld0xhc3RQcmVmaXgsCiAgICAgICAgY29udGVudDogJycKICAgICAgfSk7CiAgICB9LAogICAgc3VibWl0Rm9ybTogZnVuY3Rpb24gc3VibWl0Rm9ybSgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy4kcmVmcy5mb3JtLnZhbGlkYXRlKGZ1bmN0aW9uICh2YWxpZCkgewogICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgX3RoaXM4LmZvcm1Mb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgIHF1ZXN0aW9uQXBpLmVkaXQoX3RoaXM4LmZvcm0pLnRoZW4oZnVuY3Rpb24gKHJlKSB7CiAgICAgICAgICAgIGlmIChyZS5jb2RlID09PSAxKSB7CiAgICAgICAgICAgICAgX3RoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZS5tZXNzYWdlKTsKCiAgICAgICAgICAgICAgX3RoaXMuZGVsQ3VycmVudFZpZXcoX3RoaXMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgX3RoaXMuJHJvdXRlci5wdXNoKCcvZXhhbS9xdWVzdGlvbi9saXN0Jyk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3RoaXMuJG1lc3NhZ2UuZXJyb3IocmUubWVzc2FnZSk7CgogICAgICAgICAgICAgIF90aGlzOC5mb3JtTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBfdGhpczguZm9ybUxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBsZXZlbENoYW5nZTogZnVuY3Rpb24gbGV2ZWxDaGFuZ2UoKSB7CiAgICAgIHZhciBfdGhpczkgPSB0aGlzOwoKICAgICAgdGhpcy5mb3JtLnN1YmplY3RJZCA9IG51bGw7CiAgICAgIHRoaXMuc3ViamVjdEZpbHRlciA9IHRoaXMuc3ViamVjdHMuZmlsdGVyKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgcmV0dXJuIGRhdGEubGV2ZWwgPT09IF90aGlzOS5mb3JtLmdyYWRlTGV2ZWw7CiAgICAgIH0pOwogICAgfSwKICAgIHNob3dRdWVzdGlvbjogZnVuY3Rpb24gc2hvd1F1ZXN0aW9uKCkgewogICAgICB0aGlzLnF1ZXN0aW9uU2hvdy5kaWFsb2cgPSB0cnVlOwogICAgICB0aGlzLnF1ZXN0aW9uU2hvdy5xVHlwZSA9IHRoaXMuZm9ybS5xdWVzdGlvblR5cGU7CiAgICAgIHRoaXMucXVlc3Rpb25TaG93LnF1ZXN0aW9uID0gdGhpcy5mb3JtOwogICAgfSwKICAgIHJlc2V0Rm9ybTogZnVuY3Rpb24gcmVzZXRGb3JtKCkgewogICAgICB0aGlzLiRyZWZzWydmb3JtJ10ucmVzZXRGaWVsZHMoKTsKICAgICAgdGhpcy5mb3JtID0gewogICAgICAgIGlkOiBudWxsLAogICAgICAgIHF1ZXN0aW9uVHlwZTogMiwKICAgICAgICBncmFkZUxldmVsOiBudWxsLAogICAgICAgIHN1YmplY3RJZDogbnVsbCwKICAgICAgICB0aXRsZTogJycsCiAgICAgICAgaXRlbXM6IFt7CiAgICAgICAgICBpZDogbnVsbCwKICAgICAgICAgIHByZWZpeDogJ0EnLAogICAgICAgICAgY29udGVudDogJycKICAgICAgICB9LCB7CiAgICAgICAgICBpZDogbnVsbCwKICAgICAgICAgIHByZWZpeDogJ0InLAogICAgICAgICAgY29udGVudDogJycKICAgICAgICB9LCB7CiAgICAgICAgICBpZDogbnVsbCwKICAgICAgICAgIHByZWZpeDogJ0MnLAogICAgICAgICAgY29udGVudDogJycKICAgICAgICB9LCB7CiAgICAgICAgICBpZDogbnVsbCwKICAgICAgICAgIHByZWZpeDogJ0QnLAogICAgICAgICAgY29udGVudDogJycKICAgICAgICB9XSwKICAgICAgICBhbmFseXplOiAnJywKICAgICAgICBjb3JyZWN0OiAnJywKICAgICAgICBjb3JyZWN0QXJyYXk6IFtdLAogICAgICAgIHNjb3JlOiAnJywKICAgICAgICBkaWZmaWN1bHQ6IDAKICAgICAgfTsKICAgIH0KICB9LCBtYXBBY3Rpb25zKCdleGFtJywgewogICAgaW5pdFN1YmplY3Q6ICdpbml0U3ViamVjdCcKICB9KSksIG1hcEFjdGlvbnMoJ3RhZ3NWaWV3JywgewogICAgZGVsQ3VycmVudFZpZXc6ICdkZWxDdXJyZW50VmlldycKICB9KSksCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBHZXR0ZXJzKCdlbnVtSXRlbScsIFsnZW51bUZvcm1hdCddKSksIG1hcFN0YXRlKCdlbnVtSXRlbScsIHsKICAgIHF1ZXN0aW9uVHlwZUVudW06IGZ1bmN0aW9uIHF1ZXN0aW9uVHlwZUVudW0oc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmV4YW0ucXVlc3Rpb24udHlwZUVudW07CiAgICB9LAogICAgbGV2ZWxFbnVtOiBmdW5jdGlvbiBsZXZlbEVudW0oc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnVzZXIubGV2ZWxFbnVtOwogICAgfQogIH0pKSwgbWFwU3RhdGUoJ2V4YW0nLCB7CiAgICBzdWJqZWN0czogZnVuY3Rpb24gc3ViamVjdHMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnN1YmplY3RzOwogICAgfQogIH0pKQp9Ow=="},null]}